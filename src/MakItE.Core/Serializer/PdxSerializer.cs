using MakItE.Core.Models.Common;
using System.ComponentModel;
using System.Globalization;
using System.Text;
using static MakItE.Core.Models.Common.IObject;

namespace MakItE.Core.Serializer
{
    public abstract class PdxSerializer: IDisposable
    {
        readonly MemoryStream _mstream;
        readonly StreamWriter _streamWriter;

        int _step = 0;

        public PdxSerializer()
        {
            _mstream = new MemoryStream();
            _streamWriter = new StreamWriter(_mstream, new UTF8Encoding(true));
        }

        public static async Task SerializeToAsync<T>(Stream stream, IEnumerable<IObject> nodes)
            where T: PdxSerializer, new()
        {
            using var serializer = Activator.CreateInstance<T>();

            await SerializeToAsync(stream, nodes, serializer);
        }
        public static async Task SerializeToAsync(Stream stream, IEnumerable<IObject> nodes, PdxSerializer serializer)
        {
            serializer.WriteHeader();

            foreach (var node in Normalize(nodes))
                serializer.Serialize(node);

            serializer._streamWriter.Flush();
            serializer._mstream.Flush();

            serializer._mstream.Position = 0;

            await serializer._mstream.CopyToAsync(stream);
        }

        bool TrySerialize<T>(IObject node, Action<T> serializer) where T: IObject
        {
            if (node is T v)
            {
                serializer(v);
                return true;
            }

            return false;
        }

        static IEnumerable<IObject> Normalize(IEnumerable<IObject> nodes)
        {
            var comments = new List<string>();

            foreach(var node in nodes)
            {
                if (node is PComment cnode)
                {
                    comments.AddRange(cnode);
                    continue;
                }

                if (comments.Count > 0)
                {
                    var ncnode = NewComment(comments);
                    comments.Clear();
                    yield return ncnode;
                }

                yield return node;
            }

            if (comments.Count > 0)
            {
                yield return NewComment(comments);
            }
        }

        protected void Serialize(IObject node)
        {
            var state =
                TrySerialize<PVariable>(node, Serialize) ||
                TrySerialize<PString>(node, Serialize) ||
                TrySerialize<PNumber>(node, Serialize) ||
                TrySerialize<PNode>(node, Serialize) ||
                TrySerialize<PMatch>(node, Serialize) ||
                TrySerialize<PLabel>(node, Serialize) ||
                TrySerialize<PExpression>(node, Serialize) ||
                TrySerialize<PDate>(node, Serialize) ||
                TrySerialize<PComment>(node, Serialize) ||
                TrySerialize<PColor>(node, Serialize) ||
                TrySerialize<PList>(node, Serialize);

            if (!state)
                throw new Exception();
        }
        void WriteHeader()
        {
            WriteLine("###");
            WriteLine("### Code generated by \"MakItE Tool\"; DO NOT EDIT.");
            WriteLine("###");
            WriteLine();
            WriteLine();
        }
        protected void Write(char value) => _streamWriter.Write(value);
        protected void Write(string value) => _streamWriter.Write(value);
        protected void WriteLine(char value)
        {
            _streamWriter.WriteLine(value);
            _streamWriter.Write(new string('\t', _step));
        }
        protected void WriteLine(string value)
        {
            _streamWriter.WriteLine(value);
            _streamWriter.Write(new string('\t', _step));
        }
        protected void WriteLine()
        {
            _streamWriter.WriteLine();
            _streamWriter.Write(new string('\t', _step));
        }
        protected void WriteWhiteSpace() => _streamWriter.Write(' ');
        protected void StepUp() => ++_step;
        protected void StepDown() => _step = _step > 0 ? --_step : 0;
        protected int Step => _step;

        protected virtual void Serialize(PVariable node)
        {
            Write('@');
            Write(node.Value);
        }
        protected virtual void Serialize(PString node)
        {
            Write('"');
            Write(node.Value);
            Write('"');
        }
        protected virtual void Serialize(PNumber node)
        {
            Write(node.Value.ToString("0.######", CultureInfo.InvariantCulture));

            switch(node.Kind)
            {
                case PdxNumberKind.Percent:
                    Write('%');
                    break;
            }
        }
        protected virtual void Serialize(PMatch node)
        {
            Serialize(node.ValueL);
            WriteWhiteSpace();
            switch(node.Operator)
            {
                case PdxCompareKind.Equal:
                    Write("==");
                    break;
                case PdxCompareKind.NotEqual:
                    Write("!=");
                    break;
                case PdxCompareKind.Less:
                    Write('<');
                    break;
                case PdxCompareKind.Greater:
                    Write('>');
                    break;
                case PdxCompareKind.LessOrEqual:
                    Write("<=");
                    break;
                case PdxCompareKind.GreaterOrEqual:
                    Write(">=");
                    break;
            }
            WriteWhiteSpace();
            Serialize(node.ValueR);
        }
        protected virtual void Serialize(PLabel node)
        {
            Write(node.Value);
        }
        protected virtual void Serialize(PExpression node)
        {
            Write("@[");
            Write(node.Value);
            Write(']');
        }
        protected virtual void Serialize(PDate node)
        {
            Write(node.Value.ToString("yyy.M.d"));
        }
        protected virtual void Serialize(PComment node)
        {
            WriteLine();
            foreach (var text in node)
            {
                Write("#");
                if (!text.StartsWith('#')) WriteWhiteSpace();
                WriteLine(text);
            }
        }
        protected virtual void Serialize(PColor node)
        {
            switch (node.Kind)
            {
                case PdxColorKind.RGB:
                    Write("rgb");
                    break;
                case PdxColorKind.HSV:
                    Write("hsv");
                    break;
            }
            Write("{ ");
            Write(node.Value1.ToString("0.######", CultureInfo.InvariantCulture));
            WriteWhiteSpace();
            Write(node.Value2.ToString("0.######", CultureInfo.InvariantCulture));
            WriteWhiteSpace();
            Write(node.Value3.ToString("0.######", CultureInfo.InvariantCulture));
            Write(" }");
        }
        protected virtual void Serialize(PList node)
        {
            StepUp();
            Write('{');
            foreach (var item in node)
            {
                WriteLine();
                Serialize(item.Value);
            }
            StepDown();
            WriteLine();
            Write('}');
        }
        protected virtual void Serialize(PNode node)
        {
            Serialize(node.Key);
            Write(" = ");
            Serialize(node.Value);

            if (Step == 0) WriteLine();
        }

        public void Dispose()
        {
            _streamWriter.Dispose();
            _mstream.Dispose();
        }
    }
}
